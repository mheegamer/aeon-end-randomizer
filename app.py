# ==============================================================================
# Aeon's End Randomizer - Final Version (Local Storage + Filter + Deploy Ready)
# ==============================================================================

# --- 1. Import ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ---
import streamlit as st
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import pandas as pd
import random
import json
from streamlit_localstorage import get, set

# --- 2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏´‡∏•‡∏±‡∏Å ---
st.set_page_config(
    page_title="Aeon's End Randomizer",
    page_icon="üëπ",
    layout="wide"
)

# --- 3. CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö Layout ---
st.markdown("""
    <style>
        .block-container { padding-top: 2rem; padding-bottom: 1rem; }
        [data-testid="stVerticalBlock"] { gap: 0.75rem; }
        [data-testid="stHorizontalBlock"] { gap: 0.25rem; }
    </style>
""", unsafe_allow_html=True)


# --- 4. ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google Sheets (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Deploy) ---
@st.cache_data(ttl=600)
def load_data_from_sheet(sheet_name):
    try:
        creds_dict = st.secrets["gcp_service_account"]
        scope = ["https://spreadsheets.google.com/feeds", 'https://www.googleapis.com/auth/spreadsheets',
                 "https://www.googleapis.com/auth/drive.file", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
        client = gspread.authorize(creds)
        spreadsheet = client.open("Aeon's End - Game Data")
        worksheet = spreadsheet.worksheet(sheet_name)
        df = pd.DataFrame(worksheet.get_all_records())
        if 'Level' in df.columns:
            df['Level'] = pd.to_numeric(df['Level'], errors='coerce').fillna(0).astype(int)
        return df
    except Exception as e:
        st.sidebar.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets")
        st.sidebar.error("‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Secrets ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß")
        print(f"Error loading sheet '{sheet_name}': {e}")
        return pd.DataFrame()

# --- 5. ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° State ---
with st.spinner('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Google Sheets ‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πå‡∏î...'):
    df_mages_full = load_data_from_sheet("Mages")
    df_nemeses_full = load_data_from_sheet("Nemeses")
    df_cards_full = load_data_from_sheet("Cards")
    df_treasures_full = load_data_from_sheet("Treasures")

if "expedition_data" not in st.session_state:
    st.session_state.expedition_data = None


# --- 6. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Expedition ---
def display_expedition(data):
    st.header(f"‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: üó∫Ô∏è {data['mode']}")
    
    if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏Å‡∏°‡∏ô‡∏µ‡πâ‡∏•‡∏á‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå"):
        try:
            json_data = json.dumps(data)
            set("aeon_end_save", json_data)
            st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Expedition ‡∏•‡∏á‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
            st.toast("‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Å‡∏°‡πÑ‡∏î‡πâ")
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {e}")
    
    tab_list = ["‚ñ∂Ô∏è Setup & Battle 1", "‚öîÔ∏è Battle 2", "‚öîÔ∏è Battle 3", "üëπ Battle 4 (Final)"]
    tab1, tab2, tab3, tab4 = st.tabs(tab_list)

    # (‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ó‡πá‡∏ö‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    with tab1:
        st.subheader("üõí ‡∏ï‡∏•‡∏≤‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (Initial Market)")
        market_cards = data['initial_market']
        for i in range(0, 9, 3):
            cols = st.columns(3) 
            row_cards = market_cards[i:i+3]
            for j in range(len(row_cards)):
                with cols[j]:
                    card = row_cards[j]
                    st.image(card['ImageURL'], width=200)
                    st.caption(f"**{card.get('Name', '')}** (Cost: {card.get('Cost', 'N/A')})<br>*{card.get('Expansion', '')}*", unsafe_allow_html=True)
        st.divider()
        st.subheader("üë• ‡∏Å‡∏•‡∏∏‡πà‡∏° Mage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 4 ‡∏Ñ‡∏ô)")
        cols = st.columns(4)
        for i, mage in enumerate(data['mages']):
            with cols[i]:
                st.image(mage['ImageURL'], width=200)
                st.caption(f"**{mage['Name']}**<br>*{mage['Expansion']}*", unsafe_allow_html=True)
        st.divider()
        st.subheader("üëπ Battle 1: ‡πÄ‡∏ú‡∏ä‡∏¥‡∏ç‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏±‡∏ö")
        nemesis_1 = data['nemeses'][0]
        st.title(nemesis_1['Name'])
        st.image(nemesis_1['ImageURL'], width=250)
        st.caption(f"*{nemesis_1['Expansion']}*")
    
    with tab2:
        st.subheader("üíé ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏à‡∏≤‡∏Å‡∏î‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà 1")
        cols = st.columns(3)
        for i, t in enumerate(data['treasures'][0]):
            with cols[i]:
                st.image(t['ImageURL'], width=200)
                st.caption(f"**{t['Name']}** (Level {t['Level']})<br>*{t['Expansion']}*", unsafe_allow_html=True)
        st.divider()
        st.subheader("üîÑ ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ï‡∏•‡∏≤‡∏î‡πÉ‡∏´‡∏°‡πà 3 ‡πÉ‡∏ö")
        cols = st.columns(3)
        for i, card in enumerate(data['replacements'][0]):
                with cols[i]:
                st.image(card['ImageURL'], width=200)
                st.caption(f"**{card['Name']}** (Cost: {card['Cost']})<br>*{card['Expansion']}*", unsafe_allow_html=True)
        st.divider()
        st.subheader("üëπ Battle 2: ‡πÄ‡∏ú‡∏ä‡∏¥‡∏ç‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏±‡∏ö")
        nemesis_2 = data['nemeses'][1]
        st.title(nemesis_2['Name'])
        st.image(nemesis_2['ImageURL'], width=250)
        st.caption(f"*{nemesis_2['Expansion']}*")
    
    with tab3:
        #... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• tab 3)
    with tab4:
        #... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• tab 4)

# --- 7. ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏•‡∏∞ UI ---
st.title("üîÆ Aeon's End Randomizer")
st.sidebar.header("‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°")

# (‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô UI ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
# ...

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Å‡∏°‡∏à‡∏≤‡∏Å Local Storage ---
st.sidebar.divider()
saved_data_json = get("aeon_end_save")
if saved_data_json:
    if st.sidebar.button("‚èÆÔ∏è ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Å‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå"):
        try:
            st.session_state.expedition_data = json.loads(saved_data_json)
            st.toast("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        except Exception as e:
            st.sidebar.error("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢")
            set("aeon_end_save", None) # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏ó‡∏¥‡πâ‡∏á

# --- ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏•‡∏±‡∏Å ---
if st.session_state.expedition_data:
    display_expedition(st.session_state.expedition_data)
else:
    st.info("‚¨ÖÔ∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà!' ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ")
